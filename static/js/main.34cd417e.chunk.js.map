{"version":3,"sources":["components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","actions.js","types.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Header","nextProps","nextState","React","Component","Card","id","name","email","className","src","alt","CardList","cards","robots","map","r","key","SearchBox","onSearchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","requestRobotsPending","requestRobotsSuccess","users","payload","requestRobotsFailed","error","App","e","searchField","target","value","toLowerCase","renderPage","filteredRobots","isPending","this","onRequestRobots","filter","matchesName","includes","matchesEmail","connect","state","searchRobots","requestRobots","dispatch","text","setSearchField","getState","fetch","then","response","json","catch","Boolean","window","location","hostname","match","initialSearchState","initialRequestState","store","createStore","combineReducers","action","applyMiddleware","thunk","createLogger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34cd417e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>RoboFriends</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Card = ({ id, name, email}) => {\r\n    const classNames = \r\n        'bg-light-green dib br3 pa3 ma2 grow bw2 tc shadow-5';\r\n    return (\r\n        <div className={classNames}>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt={`${name}`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cards = robots.map(r => {\r\n        return (\r\n            <Card key={r.id} id={r.id} name={r.name} email={r.email} />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {cards}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                onChange={onSearchChange}\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search Robots' \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '2px solid black', height: '750px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './types';\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobotsPending = () => {\r\n    return {\r\n        type: REQUEST_ROBOTS_PENDING\r\n    }\r\n}\r\n\r\nexport const requestRobotsSuccess = (users) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: users\r\n    }\r\n}\r\n\r\nexport const requestRobotsFailed = (error) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport function requestRobots() {\r\n    return (dispatch, getState) => {\r\n        dispatch(requestRobotsPending());\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => dispatch(requestRobotsSuccess(users)))\r\n            .catch(error => dispatch(requestRobotsFailed(error)));\r\n    }\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../components/Header';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    onSearchChange = (e) => {\r\n        const searchField = e.target.value.toLowerCase();\r\n\r\n        this.props.onSearchChange(searchField);\r\n    };\r\n\r\n    renderPage = (filteredRobots) => {\r\n        const { isPending, error } = this.props;\r\n\r\n        if (isPending) {\r\n            return <h1 className='tc'>Loading...</h1>;\r\n        } else if (error) {\r\n            return <h1 className='tc'>Oops, there was an error! Please try refreshing the page.</h1>;\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox onSearchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { searchField, robots } = this.props;\r\n        const filteredRobots = robots.filter(r => {\r\n            const matchesName = r.name.toLowerCase().includes(searchField);\r\n            const matchesEmail = r.email.toLowerCase().includes(searchField);\r\n            return matchesName || matchesEmail;\r\n        });\r\n\r\n        return this.renderPage(filteredRobots);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (text) => dispatch(setSearchField(text)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './types';\r\n\r\nconst initialSearchState = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialRequestState = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialSearchState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchField: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state = initialRequestState, action) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true };\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: action.payload, isPending: false };\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, error: action.payload, isPending: false };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './styles/index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst store = createStore(combineReducers({\n    searchRobots,\n    requestRobots\n}), applyMiddleware(thunk, createLogger()));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}