{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cards","robots","map","r","key","SearchBox","onSearchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","e","searchValue","target","value","toLowerCase","fetch","then","response","json","users","catch","console","log","filteredRobots","filter","matchesName","includes","matchesEmail","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4NAgBeA,EAdF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAGtB,OACI,yBAAKC,UAFL,uDAGI,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAG,UAAKJ,KACxD,6BACI,4BAAKA,GACL,2BAAIC,MCOLI,EAdE,SAAC,GAAgB,IACxBC,EADuB,EAAbC,OACKC,KAAI,SAAAC,GACrB,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAEV,GAAIA,GAAIU,EAAEV,GAAIC,KAAMS,EAAET,KAAMC,MAAOQ,EAAER,WAI1D,OACI,6BACKK,ICGEK,EAbG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACjB,OACI,6BACI,2BACIC,SAAUD,EACVV,UAAU,mCACVY,KAAK,SACLC,YAAY,oBCCbC,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCkBJC,E,YApBX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,2DAGJG,KAAKX,MAAMK,a,GAjBEQ,aCqDbC,E,YAhDX,aAAe,IAAD,8BACV,+CAcJnB,eAAiB,SAACoB,GACd,IAAMC,EAAcD,EAAEE,OAAOC,MAAMC,cAEnC,EAAKP,SAAS,CAAEI,iBAhBhB,EAAKT,MAAQ,CACTjB,OAAQ,GACR0B,YAAa,IAJP,E,iFAQO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEtB,OAAQkC,OACtCC,MAAMC,QAAQC,IAAI,2B,+BASjB,IAAD,EAC2BhB,KAAKJ,MAA7BjB,EADH,EACGA,OAAQ0B,EADX,EACWA,YACVY,EAAiBtC,EAAOuC,QAAO,SAAArC,GACjC,IAAMsC,EAActC,EAAET,KAAKoC,cAAcY,SAASf,GAC5CgB,EAAexC,EAAER,MAAMmC,cAAcY,SAASf,GACpD,OAAOc,GAAeE,KAI1B,OAAiC,IAA1BJ,EAAeK,OAEtB,wBAAIhD,UAAU,MAAd,cAGI,yBAAKA,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWU,eAAgBgB,KAAKhB,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUL,OAAQsC,W,GAzCxBM,IAAMrB,WCMJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.18402efc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email}) => {\r\n    const classNames = \r\n        'bg-light-green dib br3 pa3 ma2 grow bw2 tc shadow-5';\r\n    return (\r\n        <div className={classNames}>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt={`${name}`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cards = robots.map(r => {\r\n        return (\r\n            <Card key={r.id} id={r.id} name={r.name} email={r.email} />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {cards}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                onChange={onSearchChange}\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search Robots' \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '2px solid black', height: '750px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. Something went wrong!</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchValue: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n            .catch(console.log(\"Error fetching users\"));\r\n    }\r\n\r\n    onSearchChange = (e) => {\r\n        const searchValue = e.target.value.toLowerCase();\r\n\r\n        this.setState({ searchValue });\r\n    };\r\n\r\n    render() {\r\n        const { robots, searchValue } = this.state;\r\n        const filteredRobots = robots.filter(r => {\r\n            const matchesName = r.name.toLowerCase().includes(searchValue);\r\n            const matchesEmail = r.email.toLowerCase().includes(searchValue);\r\n            return matchesName || matchesEmail;\r\n        });\r\n\r\n\r\n        return filteredRobots.length === 0 \r\n        ?\r\n        <h1 className='tc'>Loading...</h1>\r\n        :\r\n        (\r\n            <div className='tc'>\r\n                <h1>RoboFriends</h1>\r\n                <SearchBox onSearchChange={this.onSearchChange} />\r\n                <ErrorBoundary>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n                </ErrorBoundary>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}